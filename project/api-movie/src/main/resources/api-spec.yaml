swagger: '2.0'
# Actor Film Role (rolename, awards, casting)
# yml validation? project two modules? commands and pagination? API opinion
# update certain attributes like revenue for films
info:
  version: '0.1.0'
  title: Movies API
  description: An API for a movies library with actors and roles.
host: localhost:8080
basePath: /api
schemes:
  - http

securityDefinitions:
  Jwt:
    type: apiKey
    name: Authorization
    in: header
    description: Requests should pass an authorization header.

security:
  - Jwt: []

paths:
  /movies:
    post:
      tags:
        - movies
      summary: Create movie
      description: Create a new movie.
      operationId: createMovie
      consumes:
        - application/json
      parameters:
        - name: movie
          in: body
          description: Created movie object
          required: true
          schema:
            $ref: '#/definitions/Movie'
      responses:
        201:
          description: created
          schema:
            type: object
        400:
          description: Bad Request
    get:
      tags:
        - movies
      summary: Get movies
      description: Get all movies.
      operationId: getMovies
      produces:
        - application/json
      parameters:
        - in: query
          name: page
          type: integer
          required: false
          default: 0
          minimum: 0
          description: The number of the displayed page.
        - in: query
          name: pageSize
          type: integer
          required: false
          default: 20
          minimum: 0
          maximum: 100
          description: The number of items to be displayed on one page.
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Movie'
        404:
          description: Not Found
  /movies/{movieId}:
    parameters:
      - name: movieId
        in: path
        description: ID of the movie to fetch
        required: true
        type: integer
        format: int64
    get:
      tags:
        - movies
      summary: Find movie by ID
      description: Returns a single movie with specified ID
      operationId: findMovieById
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Movie'
        400:
          description: Invalid ID supplied
        404:
          description: Movie not found
        403:
          description: Not authorized
    delete:
      tags:
        - movies
      summary: Deletes a movie
      description: Deletes a movie by Id
      operationId: deleteMovie
      produces:
        - application/json
      responses:
        204:
          description: Success
        400:
          description: Invalid ID supplied
        404:
          description: Movie not found
        403:
          description: Not authorized

    put:
      tags:
        - movies
      summary: Update movie info.
      description: Update a movie with new info.
      operationId: updateMovie
      produces:
        - application/json
      parameters:
        - name: updatedMovie
          in: body
          description: the updated movie.
          required: true
          schema:
            $ref: '#/definitions/Movie'
      responses:
        200:
          description: Updated
        404:
          description: Not found
        403:
          description: Forbidden
        400:
          description: Bad Request

  /movies/{movieId}/roles:
    get:
      tags:
        - movies
      summary: Retrieve a movie's roles
      description: Get all roles of a given movie
      operationId: getAllRolesForAMovie
      produces:
        - application/json
      parameters:
        - name: movieId
          in: path
          description: Movie Id
          required: true
          type: integer
          format: int64
        - in: query
          name: page
          type: integer
          required: false
          default: 0
          minimum: 0
          description: The number of the displayed page.
        - in: query
          name: pageSize
          type: integer
          required: false
          default: 20
          minimum: 0
          maximum: 100
          description: The number of items to be displayed on one page.
      responses:
        200:
          description: ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Role'
        404:
          description: Not Found
        403:
          description: Forbidden

  /actors:
    post:
      tags:
        - actors
      summary: Create actor
      description: Create a new actor.
      operationId: createActor
      consumes:
        - application/json
      parameters:
        - name: actor
          in: body
          description: Create actor object
          required: true
          schema:
            $ref: '#/definitions/Actor'
      responses:
        201:
          description: Created
          schema:
            type: object

    get:
      tags:
        - actors
      summary: Get actors
      description: Get all actors.
      operationId: getActors
      produces:
        - application/json
      parameters:
        - in: query
          name: page
          type: integer
          required: false
          default: 0
          minimum: 0
          description: The number of the displayed page.
        - in: query
          name: pageSize
          type: integer
          required: false
          default: 20
          minimum: 0
          maximum: 100
          description: The number of items to be displayed on one page.
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Actor'

  /actors/{actorId}:
    parameters:
      - name: actorId
        in: path
        description: ID of actor to fetch
        required: true
        type: integer
        format: int64
    get:
      tags:
        - actors
      summary: Find actor by id
      description: Returns a single actor
      operationId: findActorById
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Actor'
        400:
          description: Invalid ID supplied
        404:
          description: Actor not found

    delete:
      tags:
        - actors
      summary: Deletes an actor
      description: Deletes an actor by Id
      operationId: deleteActor
      produces:
        - application/json
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Actor not found

    put:
      tags:
        - actors
      summary: Update actor info.
      description: Update an actor with new info.
      operationId: updateActor
      produces:
        - application/json
      parameters:
        - name: updatedActor
          in: body
          description: the updated actor.
          required: true
          schema:
            $ref: '#/definitions/Actor'
      responses:
        200:
          description: Updated
        404:
          description: Not found
        403:
          description: Forbidden
        400:
          description: Bad Request

  /actors/{actorId}/roles:
    get:
      tags:
        - actors
      summary: Retrieve an actor's roles
      description: Get all roles of an actor
      operationId: getAllRolesForAnActor
      produces:
        - application/json
      parameters:
        - name: actorId
          in: path
          description: Actor id
          required: true
          type: integer
          format: int64
        - in: query
          name: page
          type: integer
          required: false
          default: 0
          minimum: 0
          description: The number of the displayed page.
        - in: query
          name: pageSize
          type: integer
          required: false
          default: 20
          minimum: 0
          maximum: 100
          description: The number of items to be displayed on one page.
      responses:
        200:
          description: ok
          schema:
            type: array
            items:
              $ref: '#/definitions/Role'
        404:
          description: Not Found
        403:
          description: Forbidden

  /castings:
    post:
      tags:
        - roles
      summary: Create a role.
      description: Cast an actor in a movie.
      operationId: createRole
      consumes:
        - application/json
      parameters:
        - name: role
          in: body
          description: Created role object
          required: true
          schema:
            $ref: '#/definitions/Role'
      responses:
        201:
          description: Created Role
          schema:
            type: object
        400:
          description: Bad Request
        404:
          description: Not Found
        403:
          description: Forbidden

  /firings:
    post:
      tags:
        - roles
      summary: fire an actor.
      description: Fire an actor from his role in a movie.
      operationId: fireActor
      parameters:
        - name: roleId
          in: body
          description: id of the actor and the id of the movie of the role to delete
          required: true
          schema:
            $ref: '#/definitions/RoleIdentifier'
      responses:
        204:
          description: Actor fired
        404:
          description: Not Found
        403:
          description: Forbidden


definitions:
  Movie:
    type: object
    properties:
      title:
        type: string
      director:
        type: string
      studio:
        type: string
      production:
        type: number
        format: double
        description:
          production value of the movie made
      revenue:
        type: number
        format: double
      rating:
        type: number
        format: double
  Actor:
    type: object
    properties:
      firstname:
        type: string
      lastname:
        type: string
      expertise:
        type: string
        description: TV, film or theater actor
        enum:
          - theater
          - television
          - film

  Role:
    type: object
    properties:
      actorId:
        type: integer
        format: int64
      movieId:
        type: integer
        format: int64
      rolename:
        type: string
      awarded:
        type: boolean
      awards:
        type: integer

  RoleIdentifier:
    type: object
    properties:
      actorId:
        type: integer
        format: int64
      movieId:
        type: integer
        format: int64
    required:
      - actorId
      - movieId
