swagger: '2.0'
info:
  version: '0.1.0'
  title: User API
  description: An API for users.
host: localhost:6060
basePath: /api
schemes:
  - http

securityDefinitions:
  Jwt:
    type: apiKey
    name: Authorization
    in: header
    description: Requests should pass an authorization header.

paths:
  /registrations:
    post:
      tags:
        - user
      description: Create a new user.
      summary: Create user
      operationId: registerUser
      consumes:
        - application/json
      parameters:
        - name: user
          in: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '201':
          description: created
          schema:
            type: object
        '400':
          description: Bad Request

  /authentications:
    post:
      tags:
        - user
      description: Login user with username and password, returns a jwt token for authorizazion
      summary: Login with credentials
      operationId: loginUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: user
          in: body
          description: credentials
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/JwtToken'
        '401':
          description: Bad Credentials
        '404':
          description: Not found

  /passwords:
    patch:
      tags:
        - user
      security:
        - Jwt: []
      summary: change user Password
      description: Change user password only if he is autenticated.
      operationId: changePassword
      consumes:
        - text/plain
      parameters:
        - name: newPassword
          in: body
          required: true
          description: User's new password.
          schema:
            type: string
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request

  /profileUpdates:
    put:
      tags:
        - user
      security:
        - Jwt: []
      summary: Update user profile
      description: Update user profile info like firstname, lastname or email.
      operationId: updateProfile
      consumes:
        - application/json
      parameters:
        - name: profileUpdate
          in: body
          required: true
          description: updates to the user profile
          schema:
            $ref: '#/definitions/ProfileUpdate'
      responses:
        '200':
          description: updated
        '400':
          description: Bad Request

  /users:
    get:
      tags:
        - admin
      security:
        - Jwt: []
      summary: Get all users
      description: An admin operation to fetch all users in the database
      operationId: findAllUsers
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '404':
          description: Not found

    post:
      tags:
        - admin
      security:
        - Jwt: []
      summary: Create user
      description: Create a new user.
      operationId: createUser
      consumes:
        - application/json
      parameters:
        - name: user
          in: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '201':
          description: created
          schema:
            type: object
        '400':
          description: Bad Request

  /users/{username}:
    get:
      tags:
        - admin
      security:
        - Jwt: []
      summary: Get user by username
      description: Get user using his username.
      operationId: getUserByName
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: The username of the user to be fetched.
          required: true
          type: string
      responses:
        '200':
          description: success
          schema:
            type: object
            items:
              $ref: '#/definitions/User'
        '400':
          description: Bad Request
        '404':
          description: Not Found
    delete:
      tags:
        - admin
      security:
        - Jwt: []
      summary: Delete a user
      description: Delete a user by username
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: username of the user
          required: true
          type: string
      responses:
        '204':
          description: success
        '400':
          description: Bad Request
        '404':
          description: Not Found

definitions:
  User:
    type: object
    properties:
      username:
        type: string
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
  ProfileUpdate:
    type: object
    properties:
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
  JwtToken:
    type: object
    properties:
      token:
        type: string