swagger: '2.0'
# Actor Film Role (rolename, awards, casting)
# yml validation? project two modules? commands and pagination? API opinion
# update certain attributes like revenue for films
info:
  version: '0.1.0'
  title: Movies API
  description: An API for a movies library with actors and roles.
host: localhost:8080
basePath: /api
schemes:
  - http

securityDefinitions:
  Jwt:
    type: apiKey
    name: Authorization
    in: header
    description: Requests should pass an authorization header.

security:
  - Bearer: []

parameters:
  authHeader:
    in: header
    name: auth
    type: string
    description: The authorization header containing jwt token

paths:
  /movies:
    post:
      tags:
        - movies
      summary: Create movie
      description: Create a new movie.
      operationId: createMovie
      consumes:
        - application/json
      parameters:
        - name: movie
          in: body
          description: Created movie object
          required: true
          schema:
            $ref: '#/definitions/Movie'
      responses:
        201:
          description: created
          schema:
            type: object
        400:
          description: Bad Request
    get:
      tags:
        - movies
      summary: Get movies
      description: Get all movies.
      operationId: getMovies
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Movie'
        404:
          description: Not Found
  /movies/{movieId}:
    get:
      tags:
        - movies
      summary: Find movie by ID
      description: Returns a single movie with specified ID
      operationId: findMovieById
      produces:
        - application/json
      parameters:
        - name: movieId
          in: path
          description: ID of the movie to fetch
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Movie'
        400:
          description: Invalid ID supplied
        404:
          description: Movie not found
        403:
          description: Not authorized
    delete:
      tags:
        - movies
      summary: Deletes a movie
      description: Deletes a movie by Id
      operationId: deleteMovie
      produces:
        - application/json
      parameters:
        - name: movieId
          in: path
          description: the id of the movie to delete
          required: true
          type: integer
          format: int64
      responses:
        204:
          description: Success
        400:
          description: Invalid ID supplied
        404:
          description: Movie not found
        403:
          description: Not authorized

  /actors:
    post:
      tags:
        - actors
      summary: Create actor
      description: Create a new actor.
      operationId: createActor
      consumes:
        - application/json
      parameters:
        - name: actor
          in: body
          description: Create actor object
          required: true
          schema:
            $ref: '#/definitions/Actor'
      responses:
        201:
          description: Created
          schema:
            type: object

    get:
      tags:
        - actors
      summary: Get actors
      description: Get all actors.
      operationId: getActors
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Actor'

  /actors/{actorId}:
    get:
      tags:
        - actors
      summary: Find actor by id
      description: Returns a single actor
      operationId: findActorById
      produces:
        - application/json
      parameters:
        - name: actorId
          in: path
          description: ID of actor to fetch
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Actor'
        400:
          description: Invalid ID supplied
        404:
          description: Actor not found

    delete:
      tags:
        - actors
      summary: Deletes an actor
      description: Deletes an actor by Id
      operationId: deleteActor
      produces:
        - application/json
      parameters:
        - name: actorId
          in: path
          description: Actor id to delete
          required: true
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Actor not found

definitions:
  Movie:
    type: object
    properties:
      title:
        type: string
      director:
        type: string
      studio:
        type: string
      production:
        type: number
        format: double
        description:
          production value of the movie made
      revenue:
        type: number
        format: double
      rating:
        type: number
        format: double
  Actor:
    type: object
    properties:
      firstname:
        type: string
      lastname:
        type: string
      expertise:
        type: string
        description: TV, film or theater actor
        enum:
          - theater
          - television
          - film

  Role:
    type: object
    properties:
      actorId:
        type: integer
      movieId:
        type: integer
      character:
        type: string
      awarded:
        type: boolean
      awards:
        type: string
